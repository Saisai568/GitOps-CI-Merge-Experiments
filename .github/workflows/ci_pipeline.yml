name: CI Build & Test Pipeline (Advanced) # 管道名稱

on:
  # 觸發條件
  push:
    branches: [ "main" ] # 推送到 main 分支時執行
  pull_request:
    branches: [ "main" ] # 提交 PR 到 main 分支時執行

# 定義工作流程中的所有工作
jobs:
  # 1. 程式碼風格檢查 (Linting)
  lint:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 系統上運行
    steps:
    - uses: actions/checkout@v4 # 檢查程式碼
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # 選擇一個標準版本來執行 Linting
    
    - name: Install Linting Dependencies
      run: |
        # 假設使用 black 和 flake8 進行程式碼風格檢查
        pip install black flake8
        
    - name: Run Black Code Formatter Check
      run: |
        # --check 參數只檢查，不修改，適合 CI
        black --check .
        
    - name: Run Flake8 Style Check
      run: |
        flake8 .
        
  # 2. 單元測試 (Unit Tests) - 實施 Matrix 策略
  test:
    needs: [lint] # 確保 Linting 成功後才執行測試 (CI 閘門)
    runs-on: ubuntu-latest
    strategy:
      # Matrix 設定：針對多個 Python 版本執行測試
      matrix:
        python-version: ['3.9', '3.10', '3.11'] # (卓越/傑出要求) 針對 3 個 Python 版本
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Dependencies
      run: |
        pip install -r requirements.txt # 假設專案有 requirements.txt
        
    - name: Run Unit Tests
      run: |
        # 假設使用 pytest 進行測試
        # 若有測試覆蓋率需求，可加上 --cov 參數
        pip install pytest
        pytest
        
  # 3. 模擬發佈階段 (Release)
  # 註：在 PR 階段通常不會執行真正的發佈，但在 main 分支推動時可以執行
  release:
    needs: [test] # 確保測試成功後才執行發佈相關步驟 (CI 閘門)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # 只在推送到 main 時執行
    runs-on: ubuntu-latest
    steps:
    - name: Release Simulation
      run: |
        echo "All CI gates passed successfully!"
        echo "Simulating build and release steps..."
        # 這裡可以加入實際的建構、打標籤 (tagging) 或部署到測試環境的腳本
